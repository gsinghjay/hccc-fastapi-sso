version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fastapi_app
    restart: unless-stopped
    environment:
      - PROJECT_NAME=FastAPI User Management
      - API_PREFIX=/api
      - API_V1_STR=v1
      - DEBUG=true
      - POSTGRES_SERVER=db
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-your-secure-password}
      - POSTGRES_DB=${POSTGRES_DB:-user_management}
      - POSTGRES_PORT=5432
      - BACKEND_CORS_ORIGINS=http://localhost,https://localhost,http://localhost:8000,https://localhost:8000,http://localhost:3000,https://localhost:3000,http://pgadmin.localhost,https://pgadmin.localhost,http://traefik.localhost,https://traefik.localhost
      - WEB_CONCURRENCY=2
      - MAX_WORKERS=4  # Development setting
      - HOST=0.0.0.0
      - PORT=8000
    volumes:
      - ./app:/app/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - web
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.app.entrypoints=web"
      - "traefik.http.services.app.loadbalancer.server.port=8000"
      - "traefik.http.routers.app.service=app"
      - "traefik.http.services.app.loadbalancer.passHostHeader=true"
      - "traefik.http.middlewares.app-stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.app.middlewares=app-stripprefix"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  db:
    image: postgres:16-alpine
    container_name: postgres_main
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-your-secure-password}
      - POSTGRES_DB=${POSTGRES_DB:-user_management}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  test_db:
    image: postgres:16-alpine
    container_name: postgres_test
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-your-secure-password}
      - POSTGRES_DB=test_${POSTGRES_DB:-user_management}
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@admin.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - web
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.localhost`)"
      - "traefik.http.routers.pgadmin.entrypoints=web"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./docker/traefik/dynamic:/etc/traefik/dynamic:ro
      - ./docker/traefik/certs:/etc/traefik/acme
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=web"
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$cROOv3FQ$$6JJPNjcqHP/5KxHJ9ev2S."
      - "traefik.http.routers.dashboard.middlewares=auth"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

networks:
  web:
    external: true
  backend:
    external: false

volumes:
  postgres_data:
  pgadmin_data:
  traefik_certs: 