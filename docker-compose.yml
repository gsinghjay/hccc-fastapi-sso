version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fastapi_app
    restart: unless-stopped
    environment:
      - PROJECT_NAME=FastAPI User Management
      - API_PREFIX=/api
      - API_V1_STR=v1
      - DEBUG=true
      - POSTGRES_SERVER=db
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-your-secure-password}
      - POSTGRES_DB=${POSTGRES_DB:-user_management}
      - POSTGRES_PORT=5432
      - BACKEND_CORS_ORIGINS=${DEV_CORS_ORIGINS:-http://localhost:3000,http://localhost:8000}
      - HOST=0.0.0.0
      - PORT=8000
      - RATE_LIMIT_PER_MINUTE=120
    volumes:
      - ./app:/app/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - web
      - backend
    labels:
      - "traefik.enable=true"
      # HTTP Router
      - "traefik.http.routers.web-app.rule=Host(`${DEV_DOMAIN:-localhost}`)"
      - "traefik.http.routers.web-app.entrypoints=web"
      - "traefik.http.routers.web-app.middlewares=https-redirect"
      # HTTPS Router
      - "traefik.http.routers.websecure-app.rule=Host(`${DEV_DOMAIN:-localhost}`)"
      - "traefik.http.routers.websecure-app.entrypoints=websecure"
      - "traefik.http.routers.websecure-app.middlewares=cors-headers,secure-headers,security-headers,scheme-enforcer"
      - "traefik.http.routers.websecure-app.tls=true"
      # Service
      - "traefik.http.services.app.loadbalancer.server.port=8000"
      # Middleware - HTTPS Redirect
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
      # Middleware - CORS Headers
      - "traefik.http.middlewares.cors-headers.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH"
      - "traefik.http.middlewares.cors-headers.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.cors-headers.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.cors-headers.headers.accesscontrolallowcredentials=true"
      - "traefik.http.middlewares.cors-headers.headers.accesscontrolmaxage=3600"
      - "traefik.http.middlewares.cors-headers.headers.addvaryheader=true"
      # Middleware - Secure Headers
      - "traefik.http.middlewares.secure-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.secure-headers.headers.customrequestheaders.X-Forwarded-Host=localhost"
      - "traefik.http.middlewares.secure-headers.headers.customresponseheaders.Strict-Transport-Security=max-age=31536000; includeSubDomains; preload"
      - "traefik.http.middlewares.secure-headers.headers.customresponseheaders.X-Scheme=https"
      - "traefik.http.middlewares.secure-headers.headers.hostsproxyheaders=X-Forwarded-Host,X-Forwarded-Proto,X-Real-IP"
      # Middleware - Security Headers for Development
      - "traefik.http.middlewares.security-headers.headers.customresponseheaders.Content-Security-Policy=default-src 'self' 'unsafe-inline' 'unsafe-eval' https: http: data: blob: ws:; frame-ancestors 'self'; img-src 'self' https: http: data: blob:; font-src 'self' https: http: data:; form-action 'self'; media-src 'self' https: http: data: blob:; connect-src 'self' https: http: ws: wss:;"
      - "traefik.http.middlewares.security-headers.headers.customresponseheaders.X-Content-Type-Options=nosniff"
      - "traefik.http.middlewares.security-headers.headers.customresponseheaders.X-Frame-Options=SAMEORIGIN"
      - "traefik.http.middlewares.security-headers.headers.customresponseheaders.X-XSS-Protection=1; mode=block"
      - "traefik.http.middlewares.security-headers.headers.customresponseheaders.Referrer-Policy=strict-origin-when-cross-origin"
      # Force HTTPS scheme for all requests
      - "traefik.http.middlewares.scheme-enforcer.headers.customrequestheaders.X-Forwarded-Proto=https"

  db:
    image: postgres:16-alpine
    container_name: postgres_main
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-your-secure-password}
      - POSTGRES_DB=${POSTGRES_DB:-user_management}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  test_db:
    image: postgres:16-alpine
    container_name: postgres_test
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-your-secure-password}
      - POSTGRES_DB=test_${POSTGRES_DB:-user_management}
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/traefik/traefik.dev.yml:/etc/traefik/traefik.yml:ro
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DEV_DOMAIN:-localhost}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=web"

networks:
  web:
    external: true
  backend:
    external: false

volumes:
  postgres_data:
    driver: local
  traefik_certs: 
    driver: local 