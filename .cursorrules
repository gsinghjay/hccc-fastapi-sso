<cursor-tools Integration>
# Instructions
Use the following commands to get AI assistance:

**Web Search:**
`cursor-tools web "<your question>"` - Get answers from the web using Perplexity AI (e.g., `cursor-tools web "latest weather in London"`)
when using web for complex queries suggest writing the output to a file somewhere like local-research/<query summary>.md.

**Repository Context:**
`cursor-tools repo "<your question>"` - Get context-aware answers about this repository using Google Gemini (e.g., `cursor-tools repo "explain authentication flow"`)

**Documentation Generation:**
`cursor-tools doc [options]` - Generate comprehensive documentation for this repository (e.g., `cursor-tools doc --output docs.md`)
when using doc for remote repos suggest writing the output to a file somewhere like local-docs/<repo-name>.md.

**GitHub Information:**
`cursor-tools github pr [number]` - Get the last 10 PRs, or a specific PR by number (e.g., `cursor-tools github pr 123`)
`cursor-tools github issue [number]` - Get the last 10 issues, or a specific issue by number (e.g., `cursor-tools github issue 456`)

**Browser Automation (Stateless):**
`cursor-tools browser open <url> [options]` - Open a URL and capture page content, console logs, and network activity (e.g., `cursor-tools browser open "https://example.com" --html`)
`cursor-tools browser act "<instruction>" --url=<url> [options]` - Execute actions on a webpage using natural language instructions (e.g., `cursor-tools browser act "Click Login" --url=https://example.com`)
`cursor-tools browser observe "<instruction>" --url=<url> [options]` - Observe interactive elements on a webpage and suggest possible actions (e.g., `cursor-tools browser observe "interactive elements" --url=https://example.com`)
`cursor-tools browser extract "<instruction>" --url=<url> [options]` - Extract data from a webpage based on natural language instructions (e.g., `cursor-tools browser extract "product names" --url=https://example.com/products`)

**Notes on Browser Commands:**
- All browser commands are stateless: each command starts with a fresh browser instance and closes it when done.
- When using `--connect-to`, special URL values are supported:
  - `current`: Use the existing page without reloading
  - `reload-current`: Use the existing page and refresh it (useful in development)
- Multi step workflows involving state or combining multiple actions are supported in the `act` command using the pipe (|) separator (e.g., `cursor-tools browser act "Click Login | Type 'user@example.com' into email | Click Submit" --url=https://example.com`)
- Video recording is available for all browser commands using the `--video=<directory>` option. This will save a video of the entire browser interaction at 1280x720 resolution. The video file will be saved in the specified directory with a timestamp.
- DO NOT ask browser act to "wait" for anything, the wait command is currently disabled in Stagehand.

**Tool Recommendations:**
- `cursor-tools web` is best for general web information not specific to the repository.
- `cursor-tools repo` is ideal for repository-specific questions, planning, code review and debugging.
- `cursor-tools doc` generates documentation for local or remote repositories.
- `cursor-tools browser` is useful for testing and debugging web apps.

**Running Commands:**
1. **Installed version:** Use `cursor-tools <command>` (if in PATH) or `npm exec cursor-tools "<command>"`, `yarn cursor-tools "<command>"`, `pnpm cursor-tools "<command>"`.
2. **Without installation:** Use `npx -y cursor-tools@latest "<command>"` or `bunx -y cursor-tools@latest "<command>"`.

**General Command Options (Supported by all commands):**
--model=<model name>: Specify an alternative AI model to use
--max-tokens=<number>: Control response length
--save-to=<file path>: Save command output to a file (in *addition* to displaying it)
--help: View all available options (help is not fully implemented yet)

**Documentation Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Generate documentation for a remote GitHub repository

**GitHub Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Access PRs/issues from a specific GitHub repository

**Browser Command Options (for 'open', 'act', 'observe', 'extract'):**
--console: Capture browser console logs (enabled by default, use --no-console to disable)
--html: Capture page HTML content
--network: Capture network activity (enabled by default, use --no-network to disable)
--screenshot=<file path>: Save a screenshot of the page
--timeout=<milliseconds>: Set navigation timeout (default: 30000ms)
--viewport=<width>x<height>: Set viewport size (e.g., 1280x720). When using --connect-to, viewport is only changed if this option is explicitly provided
--headless: Run browser in headless mode (default: true)
--no-headless: Show browser UI (non-headless mode) for debugging
--connect-to=<port>: Connect to existing Chrome instance
--wait=<duration or selector>: Wait after page load (e.g., '5s', '#element-id', 'selector:.my-class')
--video=<directory>: Save a video recording of the browser interaction to the specified directory (1280x720 resolution). Not available when using --connect-to

**Additional Notes:**
- For detailed information, see `node_modules/cursor-tools/README.md` (if installed locally).
- Configuration is in `cursor-tools.config.json` (or `~/.cursor-tools/config.json`).
- API keys are loaded from `.cursor-tools.env` (or `~/.cursor-tools/.env`).
- Browser commands require separate installation of Playwright: `npm install --save-dev playwright` or `npm install -g playwright`.
- **Remember:** You're part of a team of superhuman expert AIs. Work together to solve complex problems.
<!-- cursor-tools-version: 0.5.0 -->
</cursor-tools Integration>
START SPECIFICATION:
# Technical Specification

## System Overview
The system is a FastAPI-based Single Sign-On (SSO) application designed to handle user authentication, authorization, and management. The primary components include the FastAPI backend, PostgreSQL database, Docker for containerization, and Traefik for reverse proxy and SSL termination. The system is structured to adhere to best practices in software development, including Test-Driven Development (TDD), code quality tools (ruff, mypy, black), and SOLID principles.

### Main Components
- **Frontend Components**: Not explicitly detailed in the provided specification, but typically would include web interfaces or client applications interacting with the API.
- **Backend Services**: FastAPI application handling API requests, user authentication, and business logic.
- **Databases**: PostgreSQL for storing user data and application state.
- **External APIs**: Potential integration with external services for enhanced functionality (e.g., OAuth providers).

## Core Functionality
### Primary Features
1. **User Authentication and Management**
   - **Functions**: `authenticate_user`, `create_user`, `get_user`, `update_user`
   - **Files**: `app/services/auth.py`, `app/services/user.py`
   - **Description**: 
     - `authenticate_user`: Handles user login, verifies credentials, and generates JWT tokens.
     - `create_user`: Registers a new user in the system.
     - `get_user`: Retrieves user information by ID.
     - `update_user`: Updates user information.

2. **Health Checks and System Metrics**
   - **Functions**: `get_health_status`, `get_system_metrics`
   - **Files**: `app/services/health.py`
   - **Description**: 
     - `get_health_status`: Verifies the health of the system, including database connectivity.
     - `get_system_metrics`: Retrieves current system resource usage metrics.

3. **API Endpoints**
   - **Health Check (`/health`)**: Verifies API service status.
   - **Authentication (`/auth`)**: Handles user authentication and token verification.
   - **User Management (`/users`)**: Manages user registration, profile retrieval, and updates.

### Complex Algorithms and Business Logic
- **JWT Token Generation and Validation**: Implemented in `app/services/auth.py` using Pydantic models for secure and validated token management.
- **Database Operations**: Asynchronous database interactions using SQLAlchemy 2.0, ensuring efficient and non-blocking operations.
- **Environment Configuration**: Secure and validated environment variable management using Pydantic Settings, detailed in `.cursor/rules/environment-variables.mdc`.

## Architecture
### Data Flow Patterns
1. **Incoming Requests**:
   - Clients send HTTP requests to the FastAPI application via defined API endpoints.
2. **Request Processing**:
   - Requests are routed to appropriate handlers (`app/services/*`).
   - Middleware processes requests for security, logging, and rate limiting.
3. **Database Interaction**:
   - Asynchronous database operations are performed using SQLAlchemy 2.0.
   - Data validation is handled by Pydantic models before and after database operations.
4. **Response Generation**:
   - Responses are formatted according to OpenAPI specifications and sent back to the client.
5. **Health and Metrics**:
   - Health checks and system metrics are periodically collected and can be accessed via dedicated endpoints.

### Component Interaction
- **FastAPI Application**: Central component handling all API requests and business logic.
- **PostgreSQL Database**: Stores all persistent data, interacted with via SQLAlchemy ORM.
- **Traefik**: Reverse proxy managing SSL termination, routing, and security headers.
- **Docker**: Containerizes the application for consistent deployment across environments.
END SPECIFICATION