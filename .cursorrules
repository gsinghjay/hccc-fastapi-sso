<cursor-tools Integration>
# Instructions
Use the following commands to get AI assistance:

**Web Search:**
`cursor-tools web "<your question>"` - Get answers from the web using Perplexity AI (e.g., `cursor-tools web "latest weather in London"`)
when using web for complex queries suggest writing the output to a file somewhere like local-research/<query summary>.md.

**Repository Context:**
`cursor-tools repo "<your question>"` - Get context-aware answers about this repository using Google Gemini (e.g., `cursor-tools repo "explain authentication flow"`)

**Documentation Generation:**
`cursor-tools doc [options]` - Generate comprehensive documentation for this repository (e.g., `cursor-tools doc --output docs.md`)
when using doc for remote repos suggest writing the output to a file somewhere like local-docs/<repo-name>.md.

**GitHub Information:**
`cursor-tools github pr [number]` - Get the last 10 PRs, or a specific PR by number (e.g., `cursor-tools github pr 123`)
`cursor-tools github issue [number]` - Get the last 10 issues, or a specific issue by number (e.g., `cursor-tools github issue 456`)

**Browser Automation (Stateless):**
`cursor-tools browser open <url> [options]` - Open a URL and capture page content, console logs, and network activity (e.g., `cursor-tools browser open "https://example.com" --html`)
`cursor-tools browser act "<instruction>" --url=<url> [options]` - Execute actions on a webpage using natural language instructions (e.g., `cursor-tools browser act "Click Login" --url=https://example.com`)
`cursor-tools browser observe "<instruction>" --url=<url> [options]` - Observe interactive elements on a webpage and suggest possible actions (e.g., `cursor-tools browser observe "interactive elements" --url=https://example.com`)
`cursor-tools browser extract "<instruction>" --url=<url> [options]` - Extract data from a webpage based on natural language instructions (e.g., `cursor-tools browser extract "product names" --url=https://example.com/products`)

**Notes on Browser Commands:**
- All browser commands are stateless: each command starts with a fresh browser instance and closes it when done.
- When using `--connect-to`, special URL values are supported:
  - `current`: Use the existing page without reloading
  - `reload-current`: Use the existing page and refresh it (useful in development)
- Multi step workflows involving state or combining multiple actions are supported in the `act` command using the pipe (|) separator (e.g., `cursor-tools browser act "Click Login | Type 'user@example.com' into email | Click Submit" --url=https://example.com`)
- Video recording is available for all browser commands using the `--video=<directory>` option. This will save a video of the entire browser interaction at 1280x720 resolution. The video file will be saved in the specified directory with a timestamp.
- DO NOT ask browser act to "wait" for anything, the wait command is currently disabled in Stagehand.

**Tool Recommendations:**
- `cursor-tools web` is best for general web information not specific to the repository.
- `cursor-tools repo` is ideal for repository-specific questions, planning, code review and debugging.
- `cursor-tools doc` generates documentation for local or remote repositories.
- `cursor-tools browser` is useful for testing and debugging web apps.

**Running Commands:**
1. **Installed version:** Use `cursor-tools <command>` (if in PATH) or `npm exec cursor-tools "<command>"`, `yarn cursor-tools "<command>"`, `pnpm cursor-tools "<command>"`.
2. **Without installation:** Use `npx -y cursor-tools@latest "<command>"` or `bunx -y cursor-tools@latest "<command>"`.

**General Command Options (Supported by all commands):**
--model=<model name>: Specify an alternative AI model to use
--max-tokens=<number>: Control response length
--save-to=<file path>: Save command output to a file (in *addition* to displaying it)
--help: View all available options (help is not fully implemented yet)

**Documentation Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Generate documentation for a remote GitHub repository

**GitHub Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Access PRs/issues from a specific GitHub repository

**Browser Command Options (for 'open', 'act', 'observe', 'extract'):**
--console: Capture browser console logs (enabled by default, use --no-console to disable)
--html: Capture page HTML content
--network: Capture network activity (enabled by default, use --no-network to disable)
--screenshot=<file path>: Save a screenshot of the page
--timeout=<milliseconds>: Set navigation timeout (default: 30000ms)
--viewport=<width>x<height>: Set viewport size (e.g., 1280x720). When using --connect-to, viewport is only changed if this option is explicitly provided
--headless: Run browser in headless mode (default: true)
--no-headless: Show browser UI (non-headless mode) for debugging
--connect-to=<port>: Connect to existing Chrome instance
--wait=<duration or selector>: Wait after page load (e.g., '5s', '#element-id', 'selector:.my-class')
--video=<directory>: Save a video recording of the browser interaction to the specified directory (1280x720 resolution). Not available when using --connect-to

**Additional Notes:**
- For detailed information, see `node_modules/cursor-tools/README.md` (if installed locally).
- Configuration is in `cursor-tools.config.json` (or `~/.cursor-tools/config.json`).
- API keys are loaded from `.cursor-tools.env` (or `~/.cursor-tools/.env`).
- Browser commands require separate installation of Playwright: `npm install --save-dev playwright` or `npm install -g playwright`.
- **Remember:** You're part of a team of superhuman expert AIs. Work together to solve complex problems.
<!-- cursor-tools-version: 0.5.0 -->
</cursor-tools Integration>
START SPECIFICATION:
# Technical Specification

## System Overview
The system is a FastAPI-based web application designed for user management, including registration, authentication, and profile management. The application is structured to be modular, scalable, and secure, utilizing modern web development practices and technologies. The main components include the FastAPI backend, PostgreSQL database, and a vanilla JavaScript frontend. External APIs may be integrated for additional functionality.

## Core Functionality
### User Management
1. **`register_user`**
   - **File**: `app/api/v1/users.py`
   - **Description**: Handles user registration by validating input, hashing the password, and storing user data in PostgreSQL.
   - **Critical Details**: 
     - Uses Pydantic models for input validation.
     - Hashes password using bcrypt via passlib.
     - Stores user data in PostgreSQL through repository pattern.

2. **`login_user`**
   - **File**: `app/api/v1/auth.py`
   - **Description**: Authenticates users by verifying their email and password, and returns a JWT token upon successful authentication.
   - **Critical Details**: 
     - Retrieves user from the database via repository pattern.
     - Verifies password using bcrypt via passlib.
     - Generates JWT token.

3. **`get_current_user`**
   - **File**: `app/api/v1/users.py`
   - **Description**: Retrieves the current user's profile information.
   - **Critical Details**: 
     - Verifies JWT token.
     - Retrieves user profile from the database via repository pattern.

### Authentication
1. **`create_access_token`**
   - **File**: `app/core/security.py`
   - **Description**: Generates a JWT token for authenticated users.
   - **Critical Details**: 
     - Creates a JWT token with user information and an expiration time.
     - Uses environment variables for secret key and token expiration.

2. **`verify_token`**
   - **File**: `app/core/security.py`
   - **Description**: Verifies the validity of a JWT token.
   - **Critical Details**: 
     - Decodes and verifies the JWT token to ensure it is valid and has not expired.
     - Handles token validation errors gracefully.

### Database Operations
The application uses the Repository pattern for database operations, implemented in the following structure:

1. **Repository Interface**
   - **File**: `app/repositories/user.py`
   - **Class**: `UserRepository` (Protocol)
   - **Description**: Defines the interface for user database operations.

2. **Repository Implementation**
   - **File**: `app/repositories/user.py`
   - **Class**: `SQLAlchemyUserRepository`
   - **Methods**:
     - `get_by_id`: Retrieves a user by UUID.
     - `get_by_email`: Retrieves a user by email.
     - `create`: Creates a new user.
     - `update`: Updates an existing user.
   - **Critical Details**: 
     - Uses SQLAlchemy for async database operations.
     - Implements proper error handling.
     - Manages database transactions.

### Core Data Models
1. **`UserCreate`**
   - **File**: `app/schemas/user.py`
   - **Description**: Pydantic model used for validating user registration input.
   - **Fields**: 
     - `email`: str (validated email format)
     - `password`: str
     - `full_name`: str

2. **`UserResponse`**
   - **File**: `app/schemas/user.py`
   - **Description**: Pydantic model used for returning user data.
   - **Fields**: 
     - `id`: UUID
     - `email`: str
     - `full_name`: str
     - `created_at`: datetime
     - `updated_at`: datetime

3. **`User` Database Model**
   - **File**: `app/models/user.py`
   - **Description**: SQLAlchemy model for user data.
   - **Fields**:
     - `id`: UUID (primary key)
     - `email`: String(255) (unique, indexed)
     - `hashed_password`: String(255)
     - `full_name`: String(255)
     - `created_at`: DateTime
     - `updated_at`: DateTime

### Main Connection Points with Other System Parts
1. **FastAPI Routers**
   - **Description**: Handle incoming requests and route them to appropriate handlers.
   - **Files**: 
     - `app/api/v1/users.py`
     - `app/api/v1/auth.py`
   - **Interaction**: Connects with service layer to execute business logic.

2. **Service Layer**
   - **Description**: Contains business logic and interacts with the repository layer.
   - **Files**:
     - `app/services/user.py`
     - `app/services/auth.py`
   - **Interaction**: Uses repository pattern for database operations.

3. **Repository Layer**
   - **Description**: Manages database operations using SQLAlchemy.
   - **Files**: `app/repositories/user.py`
   - **Interaction**: Executes CRUD operations on PostgreSQL using async SQLAlchemy.

4. **Security Module**
   - **Description**: Handles authentication and token management.
   - **Files**: `app/core/security.py`
   - **Interaction**: Generates and verifies JWT tokens.

### Complex Business Logic or Algorithms
1. **Password Hashing and Verification**
   - **Description**: Uses passlib with bcrypt scheme for password management.
   - **Files**: `app/core/hashing.py`
   - **Critical Details**: 
     - Ensures passwords are securely hashed and verified.
     - Uses proper salt generation.

2. **JWT Token Management**
   - **Description**: Generates and verifies JWT tokens for user authentication.
   - **Files**: `app/core/security.py`
   - **Critical Details**: 
     - Ensures secure and stateless authentication.
     - Configurable token expiration.

## Architecture
The system follows a modular architecture with clear separation of concerns:
- The FastAPI backend handles API requests through versioned endpoints (`/api/v1/`).
- The service layer contains business logic and orchestrates operations.
- The repository layer manages data persistence using the Repository pattern.
- The security module handles authentication and token management.
- Asynchronous database operations are used throughout for optimal performance.
- Data flows from the API layer to the service layer, which interacts with the repository layer for database operations.
- The security module is integrated to handle authentication and token generation/verification.
END SPECIFICATION