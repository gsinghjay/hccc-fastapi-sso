---
description: Frontend styling guidelines for consistent UI development, including Bootstrap integration, component patterns, and best practices for HTML, CSS, and JavaScript. Enforces sharp corners design system, DRY principles, and accessibility standards.
globs: app/static/css/*.css, app/static/js/*.js, app/templates/*.html, app/templates/**/*.html
---

# Frontend Styling Guidelines

## Design System

### Core Principles
- Use sharp corners (no rounded edges) throughout the application
- Maintain consistent spacing using Bootstrap utilities
- Follow a mobile-first responsive design approach
- Keep styling DRY (Don't Repeat Yourself) by centralizing in CSS

### CSS Organization
1. **File Structure**
   ```
   app/
   ├── static/
   │   ├── css/
   │   │   ├── custom.css      # Main custom styles
   │   │   └── variables.css   # CSS variables (if needed)
   │   ├── js/
   │   │   └── main.js         # Custom JavaScript
   │   └── icons/             # Custom icons if needed
   └── templates/
       └── base.html          # Base template
   ```

2. **CSS Ordering**
   ```css
   /* 1. CSS Resets and Global Overrides */
   /* 2. Custom Variables */
   /* 3. Layout & Grid */
   /* 4. Components */
   /* 5. Utilities */
   ```

### Bootstrap Integration
1. **CDN Usage**
   - Use Bootstrap CDN in production for better caching
   - Use specific version numbers to prevent breaking changes
   ```html
   <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
   ```

2. **Custom Overrides**
   - Define overrides in custom.css
   - Use !important sparingly and only for global overrides
   - Keep Bootstrap's utility classes for spacing/layout

### Component Guidelines

1. **Forms**
   ```css
   .auth-form {
       max-width: 400px;
       margin: 2rem auto;
       padding: 2rem;
       box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
   }
   ```

2. **Buttons**
   ```css
   .btn-auth {
       width: 100%;
       padding: 0.75rem;
       font-weight: 500;
   }
   ```

3. **Icons**
   ```css
   .icon-lg { font-size: 1.5rem; }
   .icon-xl { font-size: 2rem; }
   ```

### Template Structure
1. **Base Template Blocks**
   ```html
   {% block title %}{% endblock %}
   {% block extra_css %}{% endblock %}
   {% block content %}{% endblock %}
   {% block extra_js %}{% endblock %}
   ```

2. **Required Meta Tags**
   ```html
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   ```

## Best Practices

### HTML
1. Use semantic HTML5 elements
2. Keep templates DRY using Jinja2 inheritance
3. Place all scripts at the bottom of body
4. Use proper meta tags for SEO and mobile

### CSS
1. Centralize global styles in custom.css
2. Use CSS custom properties for theming
3. Follow BEM naming convention for custom components
4. Avoid inline styles

### JavaScript
1. Use vanilla JS when possible
2. Initialize components in DOMContentLoaded
3. Use ES6+ features with appropriate polyfills
4. Keep functions small and focused

### Accessibility
1. Use proper ARIA labels
2. Maintain sufficient color contrast
3. Ensure keyboard navigation
4. Test with screen readers

### Performance
1. Use CDN for framework files
2. Minify custom assets in production
3. Lazy load non-critical resources
4. Use appropriate image formats and sizes

## Implementation Examples

### Global Style Overrides
```css
/* Remove all rounded corners */
.rounded,
.btn,
.card,
.alert,
.nav-pills .nav-link,
.form-control,
.input-group-text,
.dropdown-menu,
.modal-content,
.toast {
    border-radius: 0 !important;
}
```

### Custom Utilities
```css
/* Custom spacing utilities */
.mt-6 { margin-top: 4rem !important; }
.mb-6 { margin-bottom: 4rem !important; }
```

### Template Extension
```html
{% extends "base.html" %}

{% block content %}
<div class="auth-form">
    <!-- Form content -->
</div>
{% endblock %}
```

### JavaScript Components
```javascript
// Form validation helper
function validateForm(formId) {
    const form = document.getElementById(formId);
    if (!form) return false;

    let isValid = true;
    const requiredFields = form.querySelectorAll('[required]');

    requiredFields.forEach(field => {
        if (!field.value.trim()) {
            field.classList.add('is-invalid');
            isValid = false;
        } else {
            field.classList.remove('is-invalid');
        }
    });

    return isValid;
}
``` 