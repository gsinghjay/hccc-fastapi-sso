---
description: Core FastAPI application architecture rules
globs: app/main.py, app/core/{config,security,middleware,dependencies}.py, app/core/*.py, app/api/router.py
---

# FastAPI Core Configuration Guidelines

## Application Setup
- Use `app = FastAPI()` in app/main.py as entry point
- Configure CORS through dependencies
- Implement lifespan events for database connections
- Follow 12-factor app principles for configuration

## Dependency Injection
- Centralize dependencies in app/core/dependencies.py
- Use `Depends()` for router-level injections
- Prefer class-based dependencies for complex setups
- Document dependency trees in docstrings

## Type Safety
- Use strict mypy settings:
  ```toml
  [tool.mypy]
  plugins = ["pydantic.mypy"]
  strict = true
  ```
- Leverage FastAPI's built-in type validation:
  ```python
  from fastapi import FastAPI, Depends, HTTPException
  from typing import Annotated
  
  async def get_current_user(
      token: Annotated[str, Depends(oauth2_scheme)]
  ) -> User:
  ```
  
## Async Configuration
- Use lifespan events for async startup/shutdown
- Handle both sync and async middleware properly
- Configure async database connections in lifespan
- Use proper ASGI typing for application setup

## Configuration Management
- Split API paths into prefix and version components
- Use computed properties for path construction
- Cache settings with maxsize=1

## Configuration Management
- Use single Settings class with production-ready defaults
- Secure sensitive data with SecretStr
- Cache settings with @lru_cache(maxsize=1)
- Required configurations:
  * Database connections
  * JWT/Security settings
  * CORS for frontend integration
  * Rate limiting
  * API versioning
